// lookup table for galois field exponentiation
pub const GF_EXP: [u8; 256] = [
    1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117,
    234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181,
    119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161,
    95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187,
    107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136,
    13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197,
    151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168,
    77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198,
    145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149,
    55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167,
    83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72,
    144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207,
    131, 27, 54, 108, 216, 173, 71, 142, 0,
];

// lookup table for galois field logarithms
// this is usize because it's mostly used for indexing
pub const GF_LOG: [usize; 256] = [
    0, 0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239,
    129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218,
    240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6,
    191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143,
    150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58,
    40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243,
    167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165,
    153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207,
    205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57,
    83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246,
    108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156,
    169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116,
    214, 244, 234, 168, 80, 88, 175,
];

// i'd prefer to use like, a static map for this but i don't wanna pull in a crate so this is what's happening
pub const ALPHANUMERIC_ORDER: [char; 45] = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
    'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$',
    '%', '*', '+', '-', '.', '/', ':',
];

pub const VERSION_INFO: [usize; 40] = [
    0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x07c94, 0x085bc, 0x09a99, 0x0a4d3,
    0x0bbf6, 0x0c762, 0x0d847, 0x0e60d, 0x0f928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6,
    0x15683, 0x168c9, 0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75,
    0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64, 0x27541, 0x28c69,
];

// ordered by bit length of number
pub const LENGTH_BITS: [[usize; 3]; 4] = [
    [10, 12, 14], // numeric    0b0001
    [9, 11, 13],  // alphanumeric 0b0010
    [8, 16, 16],  // byte     0b0100
    [8, 10, 12],  // kanji        0b1000
];

pub const ALIGNMENT_PATTERNS: [&[usize]; 40] = [
    &[],
    &[6, 18],
    &[6, 22],
    &[6, 26],
    &[6, 30],
    &[6, 34],
    &[6, 22, 38],
    &[6, 24, 42],
    &[6, 26, 46],
    &[6, 28, 50],
    &[6, 30, 54],
    &[6, 32, 58],
    &[6, 34, 62],
    &[6, 26, 46, 66],
    &[6, 26, 48, 70],
    &[6, 26, 50, 74],
    &[6, 30, 54, 78],
    &[6, 30, 56, 82],
    &[6, 30, 58, 86],
    &[6, 34, 62, 90],
    &[6, 28, 50, 72, 94],
    &[6, 26, 50, 74, 98],
    &[6, 30, 54, 78, 102],
    &[6, 28, 54, 80, 106],
    &[6, 32, 58, 84, 110],
    &[6, 32, 58, 86, 114],
    &[6, 34, 62, 90, 118],
    &[6, 26, 50, 74, 98, 122],
    &[6, 30, 54, 78, 102, 126],
    &[6, 26, 52, 78, 104, 130],
    &[6, 30, 56, 82, 108, 134],
    &[6, 34, 60, 86, 112, 138],
    &[6, 30, 58, 86, 114, 142],
    &[6, 34, 62, 90, 118, 146],
    &[6, 30, 54, 78, 102, 126, 150],
    &[6, 24, 50, 76, 102, 128, 154],
    &[6, 28, 54, 80, 106, 132, 158],
    &[6, 32, 58, 84, 110, 136, 162],
    &[6, 26, 54, 82, 110, 138, 166],
    &[6, 30, 58, 86, 114, 142, 170],
];

/// data capacity by version and ec level
/// [M, L, H, Q] for easy indexing
pub const DATA_CAPACITY: [[usize; 4]; 40] = [
    [16, 19, 9, 13],
    [28, 34, 16, 22],
    [44, 55, 26, 34],
    [64, 80, 36, 48],
    [86, 108, 46, 62],
    [108, 136, 60, 76],
    [124, 156, 66, 88],
    [154, 194, 86, 110],
    [182, 232, 100, 132],
    [216, 274, 122, 154],
    [254, 324, 140, 180],
    [290, 370, 158, 206],
    [334, 428, 180, 244],
    [365, 461, 197, 261],
    [415, 523, 223, 295],
    [453, 589, 253, 325],
    [507, 647, 283, 367],
    [563, 721, 313, 397],
    [627, 795, 341, 445],
    [669, 861, 385, 485],
    [714, 932, 406, 512],
    [782, 1006, 442, 568],
    [860, 1094, 464, 614],
    [914, 1174, 514, 664],
    [1000, 1276, 538, 718],
    [1062, 1370, 596, 754],
    [1128, 1468, 628, 808],
    [1193, 1531, 661, 871],
    [1267, 1631, 701, 911],
    [1373, 1735, 745, 985],
    [1455, 1843, 793, 1033],
    [1541, 1955, 845, 1115],
    [1631, 2071, 901, 1171],
    [1725, 2191, 961, 1231],
    [1812, 2306, 986, 1286],
    [1914, 2434, 1054, 1354],
    [1992, 2566, 1096, 1426],
    [2102, 2702, 1142, 1502],
    [2216, 2812, 1222, 1582],
    [2334, 2956, 1276, 1666],
];

/// num ec codewords, number of blocks in group, num data codewords, second group (same format)
type GroupInfo = ((usize, usize, usize), Option<(usize, usize, usize)>);

/// Table of block EC codewords
/// [M, L, H, Q] for easy indexing
pub const BLOCK_GROUPS: [[GroupInfo; 4]; 40] = [
    [
        ((10, 1, 16), None),
        ((7, 1, 19), None),
        ((17, 1, 9), None),
        ((13, 1, 13), None),
    ],
    [
        ((16, 1, 28), None),
        ((10, 1, 34), None),
        ((28, 1, 16), None),
        ((22, 1, 22), None),
    ],
    [
        ((26, 1, 44), None),
        ((15, 1, 55), None),
        ((22, 2, 13), None),
        ((18, 2, 17), None),
    ],
    [
        ((18, 2, 32), None),
        ((20, 1, 80), None),
        ((16, 4, 9), None),
        ((26, 2, 24), None),
    ],
    [
        ((24, 2, 43), None),
        ((26, 1, 108), None),
        ((22, 2, 11), Some((22, 2, 12))),
        ((18, 2, 15), Some((18, 2, 16))),
    ],
    [
        ((16, 4, 27), None),
        ((18, 2, 68), None),
        ((28, 4, 15), None),
        ((24, 4, 19), None),
    ],
    [
        ((18, 4, 31), None),
        ((20, 2, 78), None),
        ((26, 4, 13), Some((26, 1, 14))),
        ((18, 2, 14), Some((18, 4, 15))),
    ],
    [
        ((22, 2, 38), Some((22, 2, 39))),
        ((24, 2, 97), None),
        ((26, 4, 14), Some((26, 2, 15))),
        ((22, 4, 18), Some((22, 2, 19))),
    ],
    [
        ((22, 3, 36), Some((22, 2, 37))),
        ((30, 2, 116), None),
        ((24, 4, 12), Some((24, 4, 13))),
        ((20, 4, 16), Some((20, 4, 17))),
    ],
    [
        ((26, 4, 43), Some((26, 1, 44))),
        ((18, 2, 68), Some((18, 2, 69))),
        ((28, 6, 15), Some((28, 2, 16))),
        ((24, 6, 19), Some((24, 2, 20))),
    ],
    [
        ((30, 1, 50), Some((30, 4, 51))),
        ((20, 4, 81), None),
        ((24, 3, 12), Some((24, 8, 13))),
        ((28, 4, 22), Some((28, 4, 23))),
    ],
    [
        ((22, 6, 36), Some((22, 2, 37))),
        ((24, 2, 92), Some((24, 2, 93))),
        ((28, 7, 14), Some((28, 4, 15))),
        ((26, 4, 20), Some((26, 6, 21))),
    ],
    [
        ((22, 8, 37), Some((22, 1, 38))),
        ((26, 4, 107), None),
        ((22, 12, 11), Some((22, 4, 12))),
        ((24, 8, 20), Some((24, 4, 21))),
    ],
    [
        ((24, 4, 40), Some((24, 5, 41))),
        ((30, 3, 115), Some((30, 1, 116))),
        ((24, 11, 12), Some((24, 5, 13))),
        ((20, 11, 16), Some((20, 5, 17))),
    ],
    [
        ((24, 5, 41), Some((24, 5, 42))),
        ((22, 5, 87), Some((22, 1, 88))),
        ((24, 11, 12), Some((24, 7, 13))),
        ((30, 5, 24), Some((30, 7, 25))),
    ],
    [
        ((28, 7, 45), Some((28, 3, 46))),
        ((24, 5, 98), Some((24, 1, 99))),
        ((30, 3, 15), Some((30, 13, 16))),
        ((24, 15, 19), Some((24, 2, 20))),
    ],
    [
        ((28, 10, 46), Some((28, 1, 47))),
        ((28, 1, 107), Some((28, 5, 108))),
        ((28, 2, 14), Some((28, 17, 15))),
        ((28, 1, 22), Some((28, 15, 23))),
    ],
    [
        ((26, 9, 43), Some((26, 4, 44))),
        ((30, 5, 120), Some((30, 1, 121))),
        ((28, 2, 14), Some((28, 19, 15))),
        ((28, 17, 22), Some((28, 1, 23))),
    ],
    [
        ((26, 3, 44), Some((26, 11, 45))),
        ((28, 3, 113), Some((28, 4, 114))),
        ((26, 9, 13), Some((26, 16, 14))),
        ((26, 17, 21), Some((26, 4, 22))),
    ],
    [
        ((26, 3, 41), Some((26, 13, 42))),
        ((28, 3, 107), Some((28, 5, 108))),
        ((28, 15, 15), Some((28, 10, 16))),
        ((30, 15, 24), Some((30, 5, 25))),
    ],
    [
        ((26, 17, 42), None),
        ((28, 4, 116), Some((28, 4, 117))),
        ((30, 19, 16), Some((30, 6, 17))),
        ((28, 17, 22), Some((28, 6, 23))),
    ],
    [
        ((28, 17, 46), None),
        ((28, 2, 111), Some((28, 7, 112))),
        ((24, 34, 13), None),
        ((30, 7, 24), Some((30, 16, 25))),
    ],
    [
        ((28, 4, 47), Some((28, 14, 48))),
        ((30, 4, 121), Some((30, 5, 122))),
        ((30, 16, 15), Some((30, 14, 16))),
        ((30, 11, 24), Some((30, 14, 25))),
    ],
    [
        ((28, 6, 45), Some((28, 14, 46))),
        ((30, 6, 117), Some((30, 4, 118))),
        ((30, 30, 16), Some((30, 2, 17))),
        ((30, 11, 24), Some((30, 16, 25))),
    ],
    [
        ((28, 8, 47), Some((28, 13, 48))),
        ((26, 8, 106), Some((26, 4, 107))),
        ((30, 22, 15), Some((30, 13, 16))),
        ((30, 7, 24), Some((30, 22, 25))),
    ],
    [
        ((28, 19, 46), Some((28, 4, 47))),
        ((28, 10, 114), Some((28, 2, 115))),
        ((30, 33, 16), Some((30, 4, 17))),
        ((28, 28, 22), Some((28, 6, 23))),
    ],
    [
        ((28, 22, 45), Some((28, 3, 46))),
        ((30, 8, 122), Some((30, 4, 123))),
        ((30, 12, 15), Some((30, 28, 16))),
        ((30, 8, 23), Some((30, 26, 24))),
    ],
    [
        ((28, 3, 45), Some((28, 23, 46))),
        ((30, 3, 117), Some((30, 10, 118))),
        ((30, 11, 15), Some((30, 31, 16))),
        ((30, 4, 24), Some((30, 31, 25))),
    ],
    [
        ((28, 21, 45), Some((28, 7, 46))),
        ((30, 7, 116), Some((30, 7, 117))),
        ((30, 19, 15), Some((30, 26, 16))),
        ((30, 1, 23), Some((30, 37, 24))),
    ],
    [
        ((28, 19, 47), Some((28, 10, 48))),
        ((30, 5, 115), Some((30, 10, 116))),
        ((30, 23, 15), Some((30, 25, 16))),
        ((30, 15, 24), Some((30, 25, 25))),
    ],
    [
        ((28, 2, 46), Some((28, 29, 47))),
        ((30, 13, 115), Some((30, 3, 116))),
        ((30, 23, 15), Some((30, 28, 16))),
        ((30, 42, 24), Some((30, 1, 25))),
    ],
    [
        ((28, 10, 46), Some((28, 23, 47))),
        ((30, 17, 115), None),
        ((30, 19, 15), Some((30, 35, 16))),
        ((30, 10, 24), Some((30, 35, 25))),
    ],
    [
        ((28, 14, 46), Some((28, 21, 47))),
        ((30, 17, 115), Some((30, 1, 116))),
        ((30, 11, 15), Some((30, 46, 16))),
        ((30, 29, 24), Some((30, 19, 25))),
    ],
    [
        ((28, 14, 46), Some((28, 23, 47))),
        ((30, 13, 115), Some((30, 6, 116))),
        ((30, 59, 16), Some((30, 1, 17))),
        ((30, 44, 24), Some((30, 7, 25))),
    ],
    [
        ((28, 12, 47), Some((28, 26, 48))),
        ((30, 12, 121), Some((30, 7, 122))),
        ((30, 22, 15), Some((30, 41, 16))),
        ((30, 39, 24), Some((30, 14, 25))),
    ],
    [
        ((28, 6, 47), Some((28, 34, 48))),
        ((30, 6, 121), Some((30, 14, 122))),
        ((30, 2, 15), Some((30, 64, 16))),
        ((30, 46, 24), Some((30, 10, 25))),
    ],
    [
        ((28, 29, 46), Some((28, 14, 47))),
        ((30, 17, 122), Some((30, 4, 123))),
        ((30, 24, 15), Some((30, 46, 16))),
        ((30, 49, 24), Some((30, 10, 25))),
    ],
    [
        ((28, 13, 46), Some((28, 32, 47))),
        ((30, 4, 122), Some((30, 18, 123))),
        ((30, 42, 15), Some((30, 32, 16))),
        ((30, 48, 24), Some((30, 14, 25))),
    ],
    [
        ((28, 40, 47), Some((28, 7, 48))),
        ((30, 20, 117), Some((30, 4, 118))),
        ((30, 10, 15), Some((30, 67, 16))),
        ((30, 43, 24), Some((30, 22, 25))),
    ],
    [
        ((28, 18, 47), Some((28, 31, 48))),
        ((30, 19, 118), Some((30, 6, 119))),
        ((30, 20, 15), Some((30, 61, 16))),
        ((30, 34, 24), Some((30, 34, 25))),
    ],
];
